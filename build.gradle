import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'org.logstash.beats'
version "${new File("VERSION").text.trim()}"

description = "Beats/Lumberjack Netty implementation"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.apache.logging.log4j:log4j-core:2.6.2'

    compile 'io.netty:netty-all:4.1.18.Final'
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.7.Final'
    compile 'org.javassist:javassist:3.20.0-GA'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.1'
    compile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.1'
    compile 'org.apache.logging.log4j:log4j-api:2.6.2'

}

test {
    systemProperties.put "io.netty.leakDetectionLevel", "paranoid"
    testLogging {
        exceptionFormat = 'full'
    }
}

task run (type: JavaExec, dependsOn: classes){
    // turn on or off ssl
    if(project.hasProperty('providedargs')){
        args(providedargs.split(','))
    }
    description = "Beats testing"
    main = "org.logstash.beats.Runner"
    classpath = sourceSets.main.runtimeClasspath
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-beats_jars.rb')
            jars_file.newWriter().withWriter { w ->
                w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
                    w << "require \'jar_dependencies\'\n"
                    configurations.runtime.allDependencies.each {
                        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
                    }
                w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
            }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
            configurations.runtime.allDependencies.each { dep ->
                File f = configurations.runtime.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
                    String groupPath = dep.group.replaceAll('\\.', '/')
                    File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
                    newJarFile.mkdirs()
                    Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
            }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
            File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
            projectJarFile.mkdirs()
            Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

task wrapper(type: Wrapper) {
    description = 'Install Gradle wrapper'
    gradleVersion = '2.14'
}
